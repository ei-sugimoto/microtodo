// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: member/v1/member.proto

package memberv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ei-sugimoto/microtodo/server/member/gen/member/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MemberServiceName is the fully-qualified name of the MemberService service.
	MemberServiceName = "member.v1.MemberService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MemberServiceCreateProcedure is the fully-qualified name of the MemberService's Create RPC.
	MemberServiceCreateProcedure = "/member.v1.MemberService/Create"
	// MemberServiceLoginProcedure is the fully-qualified name of the MemberService's Login RPC.
	MemberServiceLoginProcedure = "/member.v1.MemberService/Login"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	memberServiceServiceDescriptor      = v1.File_member_v1_member_proto.Services().ByName("MemberService")
	memberServiceCreateMethodDescriptor = memberServiceServiceDescriptor.Methods().ByName("Create")
	memberServiceLoginMethodDescriptor  = memberServiceServiceDescriptor.Methods().ByName("Login")
)

// MemberServiceClient is a client for the member.v1.MemberService service.
type MemberServiceClient interface {
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
}

// NewMemberServiceClient constructs a client for the member.v1.MemberService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMemberServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MemberServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &memberServiceClient{
		create: connect.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+MemberServiceCreateProcedure,
			connect.WithSchema(memberServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		login: connect.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+MemberServiceLoginProcedure,
			connect.WithSchema(memberServiceLoginMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// memberServiceClient implements MemberServiceClient.
type memberServiceClient struct {
	create *connect.Client[v1.CreateRequest, v1.CreateResponse]
	login  *connect.Client[v1.LoginRequest, v1.LoginResponse]
}

// Create calls member.v1.MemberService.Create.
func (c *memberServiceClient) Create(ctx context.Context, req *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Login calls member.v1.MemberService.Login.
func (c *memberServiceClient) Login(ctx context.Context, req *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// MemberServiceHandler is an implementation of the member.v1.MemberService service.
type MemberServiceHandler interface {
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
}

// NewMemberServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMemberServiceHandler(svc MemberServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	memberServiceCreateHandler := connect.NewUnaryHandler(
		MemberServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(memberServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	memberServiceLoginHandler := connect.NewUnaryHandler(
		MemberServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(memberServiceLoginMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/member.v1.MemberService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MemberServiceCreateProcedure:
			memberServiceCreateHandler.ServeHTTP(w, r)
		case MemberServiceLoginProcedure:
			memberServiceLoginHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMemberServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMemberServiceHandler struct{}

func (UnimplementedMemberServiceHandler) Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("member.v1.MemberService.Create is not implemented"))
}

func (UnimplementedMemberServiceHandler) Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("member.v1.MemberService.Login is not implemented"))
}
